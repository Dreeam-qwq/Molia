From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Sat, 26 Aug 2023 16:12:17 +0800
Subject: [PATCH] Add a simple tpsbar


diff --git a/src/main/java/me/earthme/molia/MoliaConfig.java b/src/main/java/me/earthme/molia/MoliaConfig.java
index f20f39bd060c57f196b0dc309a4679fcf2589f51..051c807211c369b31442917d35cbe5c09681d95a 100644
--- a/src/main/java/me/earthme/molia/MoliaConfig.java
+++ b/src/main/java/me/earthme/molia/MoliaConfig.java
@@ -11,6 +11,8 @@ import top.leavesmc.leaves.bot.agent.Actions;
 import java.io.File;
 import java.io.IOException;
 import java.util.List;
+import me.earthme.molia.commands.TpsBarCommand;
+import me.earthme.molia.functions.GlobalServerTpsBar;
 
 public class MoliaConfig {
     //All values
@@ -27,6 +29,7 @@ public class MoliaConfig {
     public static boolean enableSuffocationOptimization = true;
 
     //Gameplay
+    public static boolean tpsBarEnabled = false;
     public static boolean fakeplayerSupport = false;
     public static boolean alwaysSendFakeplayerData = true;
     public static boolean fakeplayerSkipSleep = true;
@@ -50,6 +53,15 @@ public class MoliaConfig {
         MinecraftServer.getServer().server.getCommandMap().register("bot","leaves",new BotCommand("bot"));
     }
 
+    public static void initTpsBar(){
+        if (!tpsBarEnabled){
+            return;
+        }
+
+        GlobalServerTpsBar.init();
+        MinecraftServer.getServer().server.getCommandMap().register("tpsbar","molia",new TpsBarCommand("tpsbar"));
+    }
+
     public static void loadAllValues(){
         fixCanNotMoveEntityOffMain = getBoolean("fixes.fix_can_not_move_entity_off_main",fixCanNotMoveEntityOffMain);
         fixDoublingChunkSend = getBoolean("fixes.fix_doubling_chunk_send",fixDoublingChunkSend);
@@ -69,6 +81,9 @@ public class MoliaConfig {
         openFakeplayerInventory = getBoolean("gameplay.leaves.fakeplayer.open_inventory",openFakeplayerInventory);
         fakeplayerResident = getBoolean("gameplay.leaves.fakeplayer.fakeplayer_resident",fakeplayerResident);
         serverModName = getString("gameplay.server_mod_name",serverModName);
+        tpsBarEnabled = getBoolean("gameplay.enable_tps_bar",tpsBarEnabled);
+        initTpsBar();
+
         save();
     }
 
diff --git a/src/main/java/me/earthme/molia/commands/TpsBarCommand.java b/src/main/java/me/earthme/molia/commands/TpsBarCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..0458025d96bcc50c8a551cfe56ea6f9cdff2fa44
--- /dev/null
+++ b/src/main/java/me/earthme/molia/commands/TpsBarCommand.java
@@ -0,0 +1,40 @@
+package me.earthme.molia.commands;
+
+import me.earthme.molia.functions.GlobalServerTpsBar;
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+public class TpsBarCommand extends Command {
+    public TpsBarCommand(@NotNull String name) {
+        super(name);
+        this.setPermission("molia.commands.tpsbar");
+        this.setDescription("Show the tps and mspt through a bossbar");
+        this.setUsage("/tpsbar");
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+        if (!testPermission(sender)){
+            return true;
+        }
+
+        if (!(sender instanceof Player player)){
+            sender.sendMessage(ChatColor.RED+"Only player can use this command!");
+            return true;
+        }
+
+        if (GlobalServerTpsBar.isPlayerVisible(player)) {
+            player.sendMessage(ChatColor.BLUE + "Disabled tps bar");
+            GlobalServerTpsBar.setVisibilityForPlayer(player,false);
+            return true;
+        }
+
+        player.sendMessage(ChatColor.GREEN + "Enabled tps bar");
+        GlobalServerTpsBar.setVisibilityForPlayer(player,true);
+
+        return true;
+    }
+}
diff --git a/src/main/java/me/earthme/molia/functions/GlobalServerTpsBar.java b/src/main/java/me/earthme/molia/functions/GlobalServerTpsBar.java
new file mode 100644
index 0000000000000000000000000000000000000000..5c852426ef251a77396a9921ac2c2e2b3ff91ea0
--- /dev/null
+++ b/src/main/java/me/earthme/molia/functions/GlobalServerTpsBar.java
@@ -0,0 +1,198 @@
+package me.earthme.molia.functions;
+
+import com.google.common.collect.Lists;
+import io.papermc.paper.threadedregions.ThreadedRegionizer;
+import io.papermc.paper.threadedregions.TickData;
+import io.papermc.paper.threadedregions.TickRegions;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
+import it.unimi.dsi.fastutil.objects.Reference2ObjectLinkedOpenHashMap;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.Bukkit;
+import org.bukkit.boss.BarColor;
+import org.bukkit.boss.BarStyle;
+import org.bukkit.boss.BossBar;
+import org.bukkit.craftbukkit.boss.CraftBossBar;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.entity.Bot;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+public class GlobalServerTpsBar {
+    protected static final MinecraftInternalPlugin NULL_PLUGIN = new MinecraftInternalPlugin();
+    protected static final Map<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>, BossBar> bossBars = new Reference2ObjectLinkedOpenHashMap<>();
+    protected static final List<Player> visibleExclude = Lists.newCopyOnWriteArrayList();
+    protected static final List<Player> addedPlayers = Lists.newArrayList();
+    protected static volatile ScheduledTask tpsbarTask = null;
+
+    public static void init(){
+        Bukkit.getAsyncScheduler().runAtFixedRate(NULL_PLUGIN,c -> {
+            tpsbarTask = c;
+            try {
+                update();
+            }catch (Exception e){
+                e.printStackTrace();
+            }
+        },1,1, TimeUnit.SECONDS);
+    }
+
+    public static void onServerStop(){
+        if (tpsbarTask == null){
+            return;
+        }
+
+        tpsbarTask.cancel();
+    }
+
+    public static boolean isPlayerVisible(Player player){
+        return !visibleExclude.contains(player);
+    }
+
+    public static void setVisibilityForPlayer(Player target,boolean canSee){
+        if (!canSee){
+            visibleExclude.add(target);
+            return;
+        }
+
+        visibleExclude.remove(target);
+    }
+
+    private static void update(){
+        updateBarVisibilityForPlayers();
+        updateBarValues();
+    }
+
+    private static void updateBarValues(){
+        for (Map.Entry<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>, BossBar> entry : bossBars.entrySet()){
+            final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region = entry.getKey();
+            final BossBar bossBar = entry.getValue();
+
+            final TickData.TickReportData reportData = region.getData().getRegionSchedulingHandle().getTickReport5s(System.nanoTime());
+
+            if (reportData != null){
+                final TickData.SegmentData tpsData = reportData.tpsData().segmentAll();
+                final double mspt = reportData.timePerTickData().segmentAll().average() / 1.0E6;
+                updateTpsBar(tpsData.average(),mspt,bossBar);
+            }
+        }
+    }
+
+    private static void updateTpsBar(double tps, double mspt, @NotNull BossBar bar){
+        //TODO Complete it
+        bar.setTitle("TPS: "+String.format("%.2f", tps)+" MSPT:"+String.format("%.2f",mspt));
+        bar.setColor(barColorFromTps(tps));
+        bar.setProgress(Math.min(mspt / 50,1.0));
+    }
+
+    private static BarColor barColorFromTps(double tps){
+        if (tps >= 18){
+            return BarColor.GREEN;
+        }
+
+        if (tps >= 15){
+            return BarColor.YELLOW;
+        }
+
+        return BarColor.RED;
+    }
+
+    private static void updateBarVisibilityForPlayers(){
+        for (Player player : Bukkit.getOnlinePlayers()){
+            if (player instanceof Bot){
+                continue;
+            }
+
+            if (visibleExclude.contains(player)){
+                addedPlayers.remove(player);
+                continue;
+            }
+
+            final ServerPlayer nmsEntity = ((CraftPlayer) player).getHandle();
+            final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region = ((ServerLevel) nmsEntity.level()).regioniser.getRegionAtUnsynchronised(nmsEntity.sectionX, nmsEntity.sectionZ);
+
+            if (region != null){
+                BossBar bossBar = bossBars.get(region);
+                if (bossBar == null){
+                    //TODO Complete
+                    final BossBar newBossBar = new CraftBossBar("TPS : NaN MSPT: NaN",BarColor.PURPLE,BarStyle.SEGMENTED_20);
+                    bossBars.put(region,newBossBar);
+                    bossBar = newBossBar;
+                }
+
+                if (!bossBar.getPlayers().contains(player) && !addedPlayers.contains(player)){
+                    bossBar.addPlayer(player);
+                    addedPlayers.add(player);
+                }
+            }
+        }
+
+        final List<Player> playersToDrop = new ArrayList<>();
+        for (Player player : addedPlayers){
+            if (!Bukkit.getOnlinePlayers().contains(player)){
+                playersToDrop.add(player);
+            }
+        }
+        addedPlayers.removeAll(playersToDrop);
+
+        final List<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>> barsToRemove = new ArrayList<>();
+        for (Map.Entry<ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>, BossBar> entry : bossBars.entrySet()){
+            final BossBar bossBar = entry.getValue();
+            final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region = entry.getKey();
+
+            final List<Player> removeQueue = new ArrayList<>();
+            final Map<BossBar,List<Player>> toAddQueue = new HashMap<>();
+            for (Player player : bossBar.getPlayers()){
+                if (player instanceof Bot){
+                    continue;
+                }
+
+                if (visibleExclude.contains(player)){
+                    removeQueue.add(player);
+                    continue;
+                }
+
+                final ServerPlayer nmsEntity = ((CraftPlayer) player).getHandle();
+                final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> currentHeldRegionPlayer = ((ServerLevel) nmsEntity.level()).regioniser.getRegionAtUnsynchronised(nmsEntity.sectionX,nmsEntity.sectionZ);
+
+                if (currentHeldRegionPlayer != null && region != currentHeldRegionPlayer){
+                    removeQueue.add(player);
+                    //TODO Complete
+                    final BossBar correctBossBar = bossBars.get(currentHeldRegionPlayer);
+                    final List<Player> singleQueue = new ArrayList<>();
+
+                    if (correctBossBar != null) {
+                        toAddQueue.put(correctBossBar, singleQueue);
+                        singleQueue.add(player);
+                    }
+                }
+            }
+
+            for (Player toRemove : removeQueue){
+                bossBar.removePlayer(toRemove);
+            }
+
+            for(Map.Entry<BossBar,List<Player>> singleEntry : toAddQueue.entrySet()){
+                final BossBar targetBar = singleEntry.getKey();
+                final List<Player> addQueue = singleEntry.getValue();
+                for (Player player : addQueue){
+                    targetBar.addPlayer(player);
+                }
+            }
+
+            if (bossBar.getPlayers().isEmpty()){
+                barsToRemove.add(region);
+            }
+        }
+
+        for (ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData>  toRemove : barsToRemove){
+            bossBars.remove(toRemove);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 7cdeafd479b7079db2aa29c88a6a95285ee122ce..f7fa8cbe64c5cf8bfdc36e80325179cf1765b932 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -21,6 +21,7 @@ import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
 
 import me.earthme.molia.MoliaConfig;
+import me.earthme.molia.functions.GlobalServerTpsBar;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
 import net.minecraft.SharedConstants;
@@ -820,6 +821,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
     @Override
     public void stopServer() {
+        GlobalServerTpsBar.onServerStop(); //Molia
         super.stopServer();
         //Util.shutdownExecutors(); // Paper - moved into super
         SkullBlockEntity.clear();
