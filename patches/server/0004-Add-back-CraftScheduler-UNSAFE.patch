From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: M2ke4U <wangxyper@163.com>
Date: Sat, 17 Jun 2023 08:15:24 +0800
Subject: [PATCH] Add back CraftScheduler(UNSAFE)


diff --git a/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java b/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
index 8e31c6ee9ee16aff699e124a9b0554eaafa5c1ac..f38b4a0d4e58bd221af1a79955e68983be7dbac2 100644
--- a/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
+++ b/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
@@ -20,14 +20,18 @@ import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.server.network.ServerLoginPacketListenerImpl;
 import net.minecraft.world.level.GameRules;
 import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
 import org.slf4j.Logger;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BooleanSupplier;
 
+import static org.bukkit.craftbukkit.scheduler.CraftScheduler.MINECRAFT;
+
 public final class RegionizedServer {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -66,6 +70,11 @@ public final class RegionizedServer {
         this.tickHandle.setInitialStart(System.nanoTime() + TickRegionScheduler.TIME_BETWEEN_TICKS);
         TickRegions.getScheduler().scheduleRegion(this.tickHandle);
         TickRegions.getScheduler().init();
+
+        final AtomicInteger currTick = new AtomicInteger();
+        Bukkit.getGlobalRegionScheduler().runAtFixedRate(MINECRAFT,v -> {
+            ((CraftServer) Bukkit.getServer()).getScheduler().mainThreadHeartbeat(currTick.getAndIncrement());
+        },1,1);
     }
 
     public void invalidateStatus() {
