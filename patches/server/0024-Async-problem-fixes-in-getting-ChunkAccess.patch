From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: M2ke4U <wangxyper@163.com>
Date: Tue, 13 Jun 2023 21:53:32 +0800
Subject: [PATCH] Async problem fixes in getting ChunkAccess


diff --git a/src/main/java/me/earthme/molia/thread/CraftSchedulerRunner.java b/src/main/java/me/earthme/molia/thread/CraftSchedulerRunner.java
index 07f10a5b41d201293be34f5d2afa00ee93e9ed35..f730543bf166398a702ea7eaf7efaee8af346fd1 100644
--- a/src/main/java/me/earthme/molia/thread/CraftSchedulerRunner.java
+++ b/src/main/java/me/earthme/molia/thread/CraftSchedulerRunner.java
@@ -19,7 +19,7 @@ public class CraftSchedulerRunner extends TickThread {
 
     private static final long fullCycle = TimeUnit.MILLISECONDS.toNanos(50);
     private long lastTimeOut = 0;
-    private int tickCount = 0;
+    private volatile int tickCount = 0;
 
     private CraftSchedulerRunner(){
         super();
@@ -36,6 +36,10 @@ public class CraftSchedulerRunner extends TickThread {
         return Thread.currentThread() instanceof CraftSchedulerRunner;
     }
 
+    public int getTickCount() {
+        return this.tickCount;
+    }
+
     @Override
     public void run(){
         while (MinecraftServer.getServer().isRunning()){
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index e664c568aba954e04878c06f3671ae74673dd342..80504443e378a2916962e972a58c5e1bdc114a95 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -14,10 +14,14 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
+import java.util.concurrent.Future;
+import java.util.concurrent.FutureTask;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+
+import me.earthme.molia.thread.CraftSchedulerRunner;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
@@ -49,6 +53,9 @@ import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelData;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
+import org.bukkit.Bukkit;
+
+import static org.bukkit.craftbukkit.scheduler.CraftScheduler.MINECRAFT;
 
 public class ServerChunkCache extends ChunkSource {
 
@@ -366,10 +373,21 @@ public class ServerChunkCache extends ChunkSource {
     @Override
     public ChunkAccess getChunk(int x, int z, ChunkStatus leastStatus, boolean create) {
         final int x1 = x; final int z1 = z; // Paper - conflict on variable change
-        if (!io.papermc.paper.util.TickThread.isTickThread()) { // Paper - rewrite chunk system
-            return (ChunkAccess) CompletableFuture.supplyAsync(() -> {
+        if (!io.papermc.paper.util.TickThread.isTickThread() || CraftSchedulerRunner.isRunnerThread()) { // Paper - rewrite chunk system
+            /*return (ChunkAccess) CompletableFuture.supplyAsync(() -> {
                 return this.getChunk(x, z, leastStatus, create);
-            }, this.mainThreadProcessor).join();
+            }, this.mainThreadProcessor).join();*/
+            final FutureTask<ChunkAccess> getChunkTask = new FutureTask<>(()-> this.getChunk(x,z,leastStatus,create));
+
+            Bukkit.getServer().getRegionScheduler().run(MINECRAFT,this.level.getWorld(),x,z,t -> {
+                getChunkTask.run();
+            });
+
+            try {
+                return getChunkTask.get();
+            }catch (Exception e){
+                throw new RuntimeException(e);
+            }
         } else {
             // Paper start - optimise for loaded chunks
             LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(x, z);
