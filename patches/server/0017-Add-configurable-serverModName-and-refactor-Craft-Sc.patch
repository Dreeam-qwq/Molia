From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: M2ke4U <wangxyper@163.com>
Date: Sat, 17 Jun 2023 08:28:55 +0800
Subject: [PATCH] Add configurable serverModName and refactor Craft Scheduler
 Runner Thread


diff --git a/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java b/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
index 9c3d0eea441c4bb0138e5397095ccc922a1c3361..7af0dceda427d8119b6c98be460602c45b1373b7 100644
--- a/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
+++ b/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
@@ -5,6 +5,7 @@ import ca.spottedleaf.concurrentutil.scheduler.SchedulerThreadPool;
 import com.mojang.logging.LogUtils;
 import io.papermc.paper.threadedregions.scheduler.FoliaGlobalRegionScheduler;
 import io.papermc.paper.util.TickThread;
+import me.earthme.molia.thread.CraftSchedulerRunner;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.network.Connection;
@@ -64,32 +65,6 @@ public final class RegionizedServer {
         this.worlds.add(world);
     }
 
-    private final AtomicInteger currTick = new AtomicInteger();
-    private final TickThread schedulerRunThread = new TickThread(()->{
-        final long fullCycle = TimeUnit.MILLISECONDS.toNanos(50);
-        long lastTimeOut = 0;
-        while (MinecraftServer.getServer().isRunning()){
-            final long currTime = System.nanoTime();
-
-            try {
-                this.doSchedulerTask();
-            }finally {
-                final long usedTime = System.nanoTime() - currTime;
-
-                if (usedTime + lastTimeOut < fullCycle){
-                    LockSupport.parkNanos(fullCycle - usedTime);
-                    lastTimeOut = 0;
-                }else{
-                    lastTimeOut = usedTime - fullCycle;
-                }
-            }
-        }
-    },"Scheduler Runner Thread");
-
-    protected void doSchedulerTask(){
-        ((CraftServer) Bukkit.getServer()).getScheduler().mainThreadHeartbeat(currTick.getAndIncrement());
-    }
-
     public void init() {
         // call init event _before_ scheduling anything
         new RegionizedServerInitEvent().callEvent();
@@ -99,8 +74,7 @@ public final class RegionizedServer {
         TickRegions.getScheduler().scheduleRegion(this.tickHandle);
         TickRegions.getScheduler().init();
 
-        this.schedulerRunThread.setPriority(3);
-        this.schedulerRunThread.start();
+        CraftSchedulerRunner.RUNNER_INSTANCE.start();
     }
 
     public void invalidateStatus() {
diff --git a/src/main/java/io/papermc/paper/util/TickThread.java b/src/main/java/io/papermc/paper/util/TickThread.java
index 20d22f34b6cbd7a52f68e28e546dd413b9ee617e..3b6c7625cfbef1a3730c6e2e227b8ff667dc2640 100644
--- a/src/main/java/io/papermc/paper/util/TickThread.java
+++ b/src/main/java/io/papermc/paper/util/TickThread.java
@@ -6,6 +6,7 @@ import io.papermc.paper.threadedregions.RegionizedWorldData;
 import io.papermc.paper.threadedregions.ThreadedRegionizer;
 import io.papermc.paper.threadedregions.TickRegionScheduler;
 import io.papermc.paper.threadedregions.TickRegions;
+import me.earthme.molia.thread.CraftSchedulerRunner;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
@@ -111,6 +112,10 @@ public class TickThread extends Thread {
         this.id = id;
     }
 
+    public TickThread(){
+        this.id = ID_GENERATOR.incrementAndGet();
+    }
+
     public static TickThread getCurrentTickThread() {
         return (TickThread)Thread.currentThread();
     }
@@ -137,7 +142,7 @@ public class TickThread extends Thread {
 
     public static boolean isTickThreadFor(final ServerLevel world, final int chunkX, final int chunkZ) {
         //Molia start
-        if (Thread.currentThread().getName().equals("Scheduler Runner Thread")){
+        if (CraftSchedulerRunner.isRunnerThread()){
             return true;
         }
         //Molia end
@@ -180,7 +185,7 @@ public class TickThread extends Thread {
 
     public static boolean isTickThreadFor(final ServerLevel world, final int fromChunkX, final int fromChunkZ, final int toChunkX, final int toChunkZ) {
         //Molia start
-        if (Thread.currentThread().getName().equals("Scheduler Runner Thread")){
+        if (CraftSchedulerRunner.isRunnerThread()){
             return true;
         }
         //Molia end
@@ -216,7 +221,7 @@ public class TickThread extends Thread {
 
     public static boolean isTickThreadFor(final Entity entity) {
         //Molia start
-        if (Thread.currentThread().getName().equals("Scheduler Runner Thread")){
+        if (CraftSchedulerRunner.isRunnerThread()){
             return true;
         }
         //Molia end
diff --git a/src/main/java/me/earthme/molia/MoliaConfig.java b/src/main/java/me/earthme/molia/MoliaConfig.java
index d1215e2b3202037accac0d553cda6bc3b2b770c3..63f54137a3cdf05a39d699364704ca942fcec042 100644
--- a/src/main/java/me/earthme/molia/MoliaConfig.java
+++ b/src/main/java/me/earthme/molia/MoliaConfig.java
@@ -7,9 +7,13 @@ import java.io.File;
 import java.io.IOException;
 
 public class MoliaConfig {
+    /**
+     * Config values
+     */
     public static long checkStuckInWallInterval = 10;
     public static double entityWakeUpDurationRatioStandardDeviation = 0.2;
     public static int acquirePoiForStuckEntity = 200;
+    public static String serverModName = "Molia";
 
     private static final YamlConfiguration configEntry = new YamlConfiguration();
     private static final File CONFIG_FILE = new File("molia.yml");
@@ -27,6 +31,8 @@ public class MoliaConfig {
         entityWakeUpDurationRatioStandardDeviation = getDouble("optimizations.entity_wake_up_duration_ratio_standard_deviation",entityWakeUpDurationRatioStandardDeviation);
         acquirePoiForStuckEntity = getInt("optimizations.acquire_poi_for_stuck_entity",acquirePoiForStuckEntity);
 
+        serverModName = getString("misc.server_mod_name","Molia");
+
         save();
     }
 
diff --git a/src/main/java/me/earthme/molia/thread/CraftSchedulerRunner.java b/src/main/java/me/earthme/molia/thread/CraftSchedulerRunner.java
new file mode 100644
index 0000000000000000000000000000000000000000..07f10a5b41d201293be34f5d2afa00ee93e9ed35
--- /dev/null
+++ b/src/main/java/me/earthme/molia/thread/CraftSchedulerRunner.java
@@ -0,0 +1,61 @@
+package me.earthme.molia.thread;
+
+import io.papermc.paper.util.TickThread;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.locks.LockSupport;
+
+/**
+ * THIS CLASS ONLY USED FOR SUPPORT BUKKIT SCHEDULER
+ */
+@Deprecated
+public class CraftSchedulerRunner extends TickThread {
+    public static final CraftSchedulerRunner RUNNER_INSTANCE;
+
+    private static final long fullCycle = TimeUnit.MILLISECONDS.toNanos(50);
+    private long lastTimeOut = 0;
+    private int tickCount = 0;
+
+    private CraftSchedulerRunner(){
+        super();
+    }
+
+    static {
+        RUNNER_INSTANCE = new CraftSchedulerRunner();
+        RUNNER_INSTANCE.setName("Craft Scheduler Runner Thread");
+        RUNNER_INSTANCE.setPriority(3);
+        RUNNER_INSTANCE.setDaemon(true);
+    }
+
+    public static boolean isRunnerThread(){
+        return Thread.currentThread() instanceof CraftSchedulerRunner;
+    }
+
+    @Override
+    public void run(){
+        while (MinecraftServer.getServer().isRunning()){
+            final long currTime = System.nanoTime();
+            try {
+                this.doSchedulerTask();
+            }finally {
+                final long usedTime = System.nanoTime() - currTime;
+
+                if (usedTime + lastTimeOut < fullCycle){
+                    LockSupport.parkNanos(fullCycle - usedTime);
+                    lastTimeOut = 0;
+                }else{
+                    lastTimeOut = usedTime - fullCycle;
+                }
+            }
+        }
+    }
+
+    protected void doSchedulerTask(){
+        ((CraftServer) Bukkit.getServer()).getScheduler().mainThreadHeartbeat(this.tickCount++);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d8036253b7d8586331903277a950bf83d8ac89dd..32cbace2e30e66b0445e671aca951c8a7670c080 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -53,6 +53,8 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+
+import me.earthme.molia.MoliaConfig;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
@@ -1812,7 +1814,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @DontObfuscate
     public String getServerModName() {
-        return "Molia"; //Molia - Molia > // Folia - Folia > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return MoliaConfig.serverModName; //Molia - Molia > // Folia - Folia > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public SystemReport fillSystemReport(SystemReport details) {
