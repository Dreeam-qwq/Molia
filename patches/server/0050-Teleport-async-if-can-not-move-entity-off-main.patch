From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <wangxyper@163.com>
Date: Sun, 16 Jul 2023 18:16:18 +0800
Subject: [PATCH] Teleport async if can not move entity off main


diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 3208d68c0e8220307028acd4bcd859465611f992..ea1290e681549f9c8446cc0e64c727ee3e76ab41 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -26,6 +26,7 @@ import net.minecraft.world.level.entity.LevelEntityGetter;
 import net.minecraft.world.level.entity.Visibility;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.event.player.PlayerTeleportEvent;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
@@ -35,6 +36,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.locks.StampedLock;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -501,13 +503,34 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
             return null;
         }
 
+        //Molia start - Fix async catcher
         // ensure the new section is owned by this tick thread
-        TickThread.ensureTickThread(this.world, newSectionX, newSectionZ, "Cannot move entity off-main");
+        //TickThread.ensureTickThread(this.world, newSectionX, newSectionZ, "Cannot move entity off-main");//Molia - use soft catching and correct it
 
         // ensure the old section is owned by this tick thread
         TickThread.ensureTickThread(this.world, entity.sectionX, entity.sectionZ, "Cannot move entity off-main");
+        final ChunkEntitySlices old = this.getChunk(entity.sectionX, entity.sectionZ); //Molia - Move up
+
+        if(!TickThread.isTickThreadFor(this.world,newSectionX,newSectionZ)){
+            boolean teleportAsyncTask;
+            while(!(teleportAsyncTask = entity.teleportAsync(
+                    this.world,
+                    entity.getPosition(),
+                    entity.getYRot(),
+                    entity.getXRot(),
+                    null,
+                    PlayerTeleportEvent.TeleportCause.UNKNOWN,
+                    Entity.TELEPORT_FLAG_LOAD_CHUNK | Entity.TELEPORT_FLAG_TELEPORT_PASSENGERS,
+                    null
+            )));
+            //Paper's logic
+            if (!old.removeEntity(entity,entity.sectionY)){
+                LOGGER.warn("Could not remove entity " + entity + " from its old chunk section (" + entity.sectionX + "," + entity.sectionY + "," + entity.sectionZ + ") since it was not contained in the section");
+            }
+            return this.getOrCreateChunk(newSectionX, newSectionZ);
+        }
+        //Molia end
 
-        final ChunkEntitySlices old = this.getChunk(entity.sectionX, entity.sectionZ);
         final ChunkEntitySlices slices = this.getOrCreateChunk(newSectionX, newSectionZ);
 
         if (!old.removeEntity(entity, entity.sectionY)) {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 69b7b64d31c83b50ce6a80ca3272f90ada7e54fc..1017376e1279dac5e89695c37ceb4dda09a7979b 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -5374,6 +5374,15 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         // Paper start
         this.setPosRaw(x, y, z, false);
     }
+
+    //Molia start - Fix move entity off main
+    public Vec3 getPosition() {
+        synchronized (this.posLock){
+            return this.position;
+        }
+    }
+    //Molia end
+
     public final void setPosRaw(double x, double y, double z, boolean forceBoundingBoxUpdate) {
         // Paper start - block invalid positions
         if (!checkPosition(this, x, y, z)) {
@@ -5400,7 +5409,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         boolean posChanged = this.position.x != x || this.position.y != y || this.position.z != z; // Folia - region threading
         if (posChanged) { // Folia - region threading
             synchronized (this.posLock) { // Paper
-            this.position = new Vec3(x, y, z);
+                this.position = new Vec3(x, y, z);
             } // Paper
             int i = Mth.floor(x);
             int j = Mth.floor(y);
