From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: M2ke4U <wangxyper@163.com>
Date: Sat, 17 Jun 2023 08:15:40 +0800
Subject: [PATCH] Async catcher tweaks


diff --git a/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java b/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
index f38b4a0d4e58bd221af1a79955e68983be7dbac2..9c3d0eea441c4bb0138e5397095ccc922a1c3361 100644
--- a/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
+++ b/src/main/java/io/papermc/paper/threadedregions/RegionizedServer.java
@@ -26,8 +26,10 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 
 import static org.bukkit.craftbukkit.scheduler.CraftScheduler.MINECRAFT;
@@ -62,6 +64,32 @@ public final class RegionizedServer {
         this.worlds.add(world);
     }
 
+    private final AtomicInteger currTick = new AtomicInteger();
+    private final TickThread schedulerRunThread = new TickThread(()->{
+        final long fullCycle = TimeUnit.MILLISECONDS.toNanos(50);
+        long lastTimeOut = 0;
+        while (MinecraftServer.getServer().isRunning()){
+            final long currTime = System.nanoTime();
+
+            try {
+                this.doSchedulerTask();
+            }finally {
+                final long usedTime = System.nanoTime() - currTime;
+
+                if (usedTime + lastTimeOut < fullCycle){
+                    LockSupport.parkNanos(fullCycle - usedTime);
+                    lastTimeOut = 0;
+                }else{
+                    lastTimeOut = usedTime - fullCycle;
+                }
+            }
+        }
+    },"Scheduler Runner Thread");
+
+    protected void doSchedulerTask(){
+        ((CraftServer) Bukkit.getServer()).getScheduler().mainThreadHeartbeat(currTick.getAndIncrement());
+    }
+
     public void init() {
         // call init event _before_ scheduling anything
         new RegionizedServerInitEvent().callEvent();
@@ -71,10 +99,8 @@ public final class RegionizedServer {
         TickRegions.getScheduler().scheduleRegion(this.tickHandle);
         TickRegions.getScheduler().init();
 
-        final AtomicInteger currTick = new AtomicInteger();
-        Bukkit.getGlobalRegionScheduler().runAtFixedRate(MINECRAFT,v -> {
-            ((CraftServer) Bukkit.getServer()).getScheduler().mainThreadHeartbeat(currTick.getAndIncrement());
-        },1,1);
+        this.schedulerRunThread.setPriority(3);
+        this.schedulerRunThread.start();
     }
 
     public void invalidateStatus() {
diff --git a/src/main/java/io/papermc/paper/util/TickThread.java b/src/main/java/io/papermc/paper/util/TickThread.java
index cb453dd110fc37fae75257a4576512126207763e..20d22f34b6cbd7a52f68e28e546dd413b9ee617e 100644
--- a/src/main/java/io/papermc/paper/util/TickThread.java
+++ b/src/main/java/io/papermc/paper/util/TickThread.java
@@ -136,6 +136,11 @@ public class TickThread extends Thread {
     }
 
     public static boolean isTickThreadFor(final ServerLevel world, final int chunkX, final int chunkZ) {
+        //Molia start
+        if (Thread.currentThread().getName().equals("Scheduler Runner Thread")){
+            return true;
+        }
+        //Molia end
         final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region =
             TickRegionScheduler.getCurrentRegion();
         if (region == null) {
@@ -174,6 +179,11 @@ public class TickThread extends Thread {
     }
 
     public static boolean isTickThreadFor(final ServerLevel world, final int fromChunkX, final int fromChunkZ, final int toChunkX, final int toChunkZ) {
+        //Molia start
+        if (Thread.currentThread().getName().equals("Scheduler Runner Thread")){
+            return true;
+        }
+        //Molia end
         final ThreadedRegionizer.ThreadedRegion<TickRegions.TickRegionData, TickRegions.TickRegionSectionData> region =
             TickRegionScheduler.getCurrentRegion();
         if (region == null) {
@@ -205,6 +215,11 @@ public class TickThread extends Thread {
     }
 
     public static boolean isTickThreadFor(final Entity entity) {
+        //Molia start
+        if (Thread.currentThread().getName().equals("Scheduler Runner Thread")){
+            return true;
+        }
+        //Molia end
         if (entity == null) {
             return true;
         }
