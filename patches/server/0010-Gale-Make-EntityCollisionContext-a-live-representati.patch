From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: M2ke4U <wangxyper@163.com>
Date: Sat, 17 Jun 2023 08:18:34 +0800
Subject: [PATCH] Gale Make EntityCollisionContext a live representation


diff --git a/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java b/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java
index ebe65474a4a05ff1637d7f37ebcfe690af59def5..1bf730336e23eef97d22de7613c63bb9ea0c427c 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java
@@ -19,47 +19,72 @@ public class EntityCollisionContext implements CollisionContext {
             return defaultValue;
         }
     };
+    // Gale start - Airplane - make EntityCollisionContext a live representation - remove these and pray no plugin uses them
+    /*
     private final boolean descending;
     private final double entityBottom;
     private final ItemStack heldItem;
     private final Predicate<FluidState> canStandOnFluid;
+     */
+    // Gale end - Airplane - make EntityCollisionContext a live representation - remove these and pray no plugin uses them
     @Nullable
     private final Entity entity;
 
     protected EntityCollisionContext(boolean descending, double minY, ItemStack heldItem, Predicate<FluidState> walkOnFluidPredicate, @Nullable Entity entity) {
+        // Gale start - Airplane - make EntityCollisionContext a live representation - remove these and pray no plugin uses them
+        /*
         this.descending = descending;
         this.entityBottom = minY;
         this.heldItem = heldItem;
         this.canStandOnFluid = walkOnFluidPredicate;
+         */
+        // Gale end - Airplane - make EntityCollisionContext a live representation - remove these and pray no plugin uses them
         this.entity = entity;
     }
 
     /** @deprecated */
     @Deprecated
     protected EntityCollisionContext(Entity entity) {
+        // Gale start - Airplane - make EntityCollisionContext a live representation - remove unneeded things
+        /*
         this(entity.isDescending(), entity.getY(), entity instanceof LivingEntity ? ((LivingEntity)entity).getMainHandItem() : ItemStack.EMPTY, entity instanceof LivingEntity ? ((LivingEntity)entity)::canStandOnFluid : (fluidState) -> {
             return false;
         }, entity);
+         */
+        // Gale end - Airplane - make EntityCollisionContext a live representation - remove unneeded things
+        this.entity = entity;
     }
 
     @Override
     public boolean isHoldingItem(Item item) {
-        return this.heldItem.is(item);
+        // Gale start - Airplane - make EntityCollisionContext a live representation
+        Entity entity = this.entity;
+        if (entity instanceof LivingEntity livingEntity) {
+            return livingEntity.getMainHandItem().is(item);
+        }
+        return ItemStack.EMPTY.is(item);
+        // Gale end - Airplane - make EntityCollisionContext a live representation
     }
 
     @Override
     public boolean canStandOnFluid(FluidState stateAbove, FluidState state) {
-        return this.canStandOnFluid.test(state) && !stateAbove.getType().isSame(state.getType());
+        // Gale start - Airplane - make EntityCollisionContext a live representation
+        Entity entity = this.entity;
+        if (entity instanceof LivingEntity livingEntity) {
+            return livingEntity.canStandOnFluid(state) && !stateAbove.getType().isSame(state.getType());
+        }
+        return false;
+        // Gale end - Airplane - make EntityCollisionContext a live representation
     }
 
     @Override
     public boolean isDescending() {
-        return this.descending;
+        return this.entity != null && this.entity.isDescending(); // Gale - Airplane - make EntityCollisionContext a live representation
     }
 
     @Override
     public boolean isAbove(VoxelShape shape, BlockPos pos, boolean defaultValue) {
-        return this.entityBottom > (double)pos.getY() + shape.max(Direction.Axis.Y) - (double)1.0E-5F;
+        return (this.entity == null ? -Double.MAX_VALUE : entity.getY()) > (double)pos.getY() + shape.max(Direction.Axis.Y) - (double)1.0E-5F; // Gale - Airplane - make EntityCollisionContext a live representation
     }
 
     @Nullable
