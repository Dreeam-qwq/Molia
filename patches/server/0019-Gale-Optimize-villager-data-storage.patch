From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <wangxyper@163.com>
Date: Sun, 11 Jun 2023 18:13:08 +0800
Subject: [PATCH] Gale Optimize villager data storage


diff --git a/src/main/java/net/minecraft/world/Container.java b/src/main/java/net/minecraft/world/Container.java
index 04b1531572e8fff1e46fe1c94e7fc863841e0f66..b7b9158c1c0de00ec5f542683387132f2031e304 100644
--- a/src/main/java/net/minecraft/world/Container.java
+++ b/src/main/java/net/minecraft/world/Container.java
@@ -67,6 +67,21 @@ public interface Container extends Clearable {
         });
     }
 
+    // Gale start - optimize villager data storage
+    default boolean hasAnyOf(Item[] items) {
+        for (int i = 0; i < this.getContainerSize(); ++i) {
+            ItemStack itemstack = this.getItem(i);
+            for (Item item : items) {
+                if (itemstack.is(item)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+    // Gale end - optimize villager data storage
+
+
     default boolean hasAnyMatching(Predicate<ItemStack> predicate) {
         for (int i = 0; i < this.getContainerSize(); ++i) {
             ItemStack itemstack = this.getItem(i);
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java
index 75dc06a3041bfdfb08c914eb50cfa282ae9eb2fe..53b0519bbc5d52490040eaf0fe449648f021d0c2 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/SecondaryPoiSensor.java
@@ -2,7 +2,8 @@ package net.minecraft.world.entity.ai.sensing;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
-import java.util.List;
+
+import java.util.ArrayList;
 import java.util.Set;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
@@ -12,6 +13,7 @@ import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.level.Level;
+import org.jetbrains.annotations.Nullable;
 
 public class SecondaryPoiSensor extends Sensor<Villager> {
     private static final int SCAN_RATE = 40;
@@ -24,21 +26,26 @@ public class SecondaryPoiSensor extends Sensor<Villager> {
     protected void doTick(ServerLevel world, Villager entity) {
         // Gale start - Lithium - skip secondary POI sensor if absent
         var secondaryPoi = entity.getVillagerData().getProfession().secondaryPoi();
-        if (secondaryPoi.isEmpty()) {
+        if (secondaryPoi == null) { // Gale - optimize villager data storage
             entity.getBrain().eraseMemory(MemoryModuleType.SECONDARY_JOB_SITE);
             return;
         }
         // Gale end - Lithium - skip secondary POI sensor if absent
         ResourceKey<Level> resourceKey = world.dimension();
         BlockPos blockPos = entity.blockPosition();
-        List<GlobalPos> list = Lists.newArrayList();
+        @Nullable ArrayList<GlobalPos> list = null; // Gale - optimize villager data storage
         int i = 4;
 
         for(int j = -4; j <= 4; ++j) {
             for(int k = -2; k <= 2; ++k) {
                 for(int l = -4; l <= 4; ++l) {
                     BlockPos blockPos2 = blockPos.offset(j, k, l);
-                    if (entity.getVillagerData().getProfession().secondaryPoi().contains(world.getBlockState(blockPos2).getBlock())) {
+                    // Gale start - optimize villager data storage
+                    if (secondaryPoi == world.getBlockState(blockPos2).getBlock()) {
+                        if (list == null) {
+                            list = Lists.newArrayList();
+                        }
+                        // Gale end - optimize villager data storage
                         list.add(GlobalPos.of(resourceKey, blockPos2));
                     }
                 }
@@ -46,7 +53,10 @@ public class SecondaryPoiSensor extends Sensor<Villager> {
         }
 
         Brain<?> brain = entity.getBrain();
-        if (!list.isEmpty()) {
+        // Gale start - optimize villager data storage
+        if (list != null) {
+            list.trimToSize();
+            // Gale end - optimize villager data storage
             brain.setMemory(MemoryModuleType.SECONDARY_JOB_SITE, list);
         } else {
             brain.eraseMemory(MemoryModuleType.SECONDARY_JOB_SITE);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 0d16b7ea1e2c7d430b09721d50ea199aaa58bc89..77fae6053a48973a8f3afd1502a7c2a09cc80f74 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -88,6 +88,7 @@ import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.phys.AABB;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -103,8 +104,9 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA = SynchedEntityData.defineId(Villager.class, EntityDataSerializers.VILLAGER_DATA);
     public static final int BREEDING_FOOD_THRESHOLD = 12;
     public static final Map<Item, Integer> FOOD_POINTS = ImmutableMap.of(Items.BREAD, 4, Items.POTATO, 1, Items.CARROT, 1, Items.BEETROOT, 1);
+    public static final Item[] FOOD_POINTS_KEY_ARRAY = FOOD_POINTS.keySet().toArray(Item[]::new); // Gale - optimize villager data storage
     private static final int TRADES_PER_LEVEL = 2;
-    private static final Set<Item> WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, new Item[]{Items.BEETROOT_SEEDS});
+    private static final Item[] WANTED_ITEMS = new Item[]{Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT,Items.BEETROOT_SEEDS};
     private static final int MAX_GOSSIP_TOPICS = 10;
     private static final int GOSSIP_COOLDOWN = 1200;
     private static final int GOSSIP_DECAY_INTERVAL = 24000;
@@ -913,7 +915,28 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     public boolean wantsToPickUp(ItemStack stack) {
         Item item = stack.getItem();
 
-        return (Villager.WANTED_ITEMS.contains(item) || this.getVillagerData().getProfession().requestedItems().contains(item)) && this.getInventory().canAddItem(stack);
+        // Gale start - optimize villager data storage
+        boolean isDesired = false;
+        for (Item wantedItem : WANTED_ITEMS) {
+            if (wantedItem == item) {
+                isDesired = true;
+                break;
+            }
+        }
+        if (!isDesired) {
+            var requestedItems = this.getVillagerData().getProfession().requestedItems();
+            if (requestedItems == null) {
+                return false;
+            }
+            for (Item requestedItem : requestedItems) {
+                if (requestedItem == item) {
+                    isDesired = true;
+                    break;
+                }
+            }
+        }
+        return isDesired && this.getInventory().canAddItem(stack);
+        // Gale end - optimize villager data storage
     }
 
     public boolean hasExcessFood() {
