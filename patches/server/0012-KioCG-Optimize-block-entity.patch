From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <wangxyper@163.com>
Date: Thu, 6 Apr 2023 19:51:00 +0800
Subject: [PATCH] KioCG-Optimize-block-entity


diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index 90e56394554b2b6d5dd12fa7f1f5279dc9a38478..42d5cbc46fb5f5b6fac4510c9660f25bed904fd7 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -280,7 +280,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     @Nullable
     @Override
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockState state, BlockEntityType<T> type) {
-        return world.isClientSide ? ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null) : ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cooldownTick));
+        return world.isClientSide ? ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null) : ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : null); // KioCG - 优化未燃烧的运算
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index a3f073066f6e2eea8964461ad2b0409ade202f35..abf2441f6a8f2707adaeada9a0f77609be8b6c0f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -84,6 +84,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     public final Object2IntOpenHashMap<ResourceLocation> recipesUsed;
     private final RecipeManager.CachedCheck<Container, ? extends AbstractCookingRecipe> quickCheck;
     public final RecipeType<? extends AbstractCookingRecipe> recipeType; // Paper
+    private boolean shouldTick = true; // KioCG
 
     protected AbstractFurnaceBlockEntity(BlockEntityType<?> blockEntityType, BlockPos pos, BlockState state, RecipeType<? extends AbstractCookingRecipe> recipeType) {
         super(blockEntityType, pos, state);
@@ -316,6 +317,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, AbstractFurnaceBlockEntity blockEntity) {
+        if (!blockEntity.isLit() && !blockEntity.shouldTick) return; else blockEntity.shouldTick = false; // KioCG - 优化未燃烧的tick
         boolean flag = blockEntity.isLit();
         boolean flag1 = false;
 
@@ -343,6 +345,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             int i = blockEntity.getMaxStackSize();
 
             if (!blockEntity.isLit() && AbstractFurnaceBlockEntity.canBurn(world.registryAccess(), irecipe, blockEntity.items, i)) {
+                blockEntity.shouldTick = true; // KioCG
                 // CraftBukkit start
                 CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
 
@@ -384,6 +387,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                 }
                 // CraftBukkit end
 
+                blockEntity.shouldTick = true; // KioCG
                 ++blockEntity.cookingProgress;
                 if (blockEntity.cookingProgress >= blockEntity.cookingTotalTime) { // Paper - cook speed multiplier API
                     blockEntity.cookingProgress = 0;
@@ -567,6 +571,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             this.setChanged();
         }
 
+        this.shouldTick = true; // KioCG
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index 526d1bfd5ad0de7bcfd0c2da902515f3dec94c54..d0b68183aa027ec368ab3885991b5a261cc299f6 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -59,6 +59,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     //private int lastTick = MinecraftServer.currentTick; // Folia - region ticking - restore original timers
     public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
     private int maxStack = 64;
+    private boolean shouldTick = true; // KioCG
 
     public void onOpen(CraftHumanEntity who) {
         this.transaction.add(who);
@@ -149,6 +150,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     }
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, BrewingStandBlockEntity blockEntity) {
+        if (blockEntity.brewTime <= 0 && !blockEntity.shouldTick) return; else blockEntity.shouldTick = false; // KioCG - 优化未燃烧的tick
         ItemStack itemstack = (ItemStack) blockEntity.items.get(4);
 
         if (blockEntity.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
@@ -177,6 +179,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
 
         if (flag1) {
             --blockEntity.brewTime; // Folia - region ticking - restore original timers
+            blockEntity.shouldTick = true; // KioCG
             boolean flag2 = blockEntity.brewTime <= 0; // == -> <=
             // CraftBukkit end
 
@@ -331,6 +334,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
             this.items.set(slot, stack);
         }
 
+        this.shouldTick = true; // KioCG
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index 91feee1e284c929b008bc2df7ab548df898b3ef7..1a86a87ab7566588fa5c0d1ff84dd673d6f800cb 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -122,6 +122,24 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
 
     }
 
+    // KioCG start
+    public static void cooldownImmediately(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
+        boolean flag = false;
+
+        for (int i = 0; i < campfire.items.size(); ++i) {
+            if (campfire.cookingProgress[i] > 0) {
+                flag = true;
+                campfire.cookingProgress[i] = (int) 0;
+            }
+        }
+
+        if (flag) {
+            setChanged(world, pos, state);
+        }
+
+    }
+    // KioCG end
+
     public static void particleTick(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
         RandomSource randomsource = world.random;
         int i;
@@ -249,6 +267,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
     public void dowse() {
         if (this.level != null) {
             this.markUpdated();
+            this.cooldownImmediately(this.getLevel(), this.getBlockPos(), this.getBlockState(), (CampfireBlockEntity) this); // KioCG - 优化未燃烧的运算
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 0134370081182260d578ee1d8a16d544c03b6a0d..8f51de051cd1cb91f407f0a7a7e6ab4b0a282034 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -716,7 +716,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     @Nullable
     private static Container getSourceContainer(Level world, Hopper hopper) {
         // CraftBukkit start
-        Container inventory = HopperBlockEntity.getContainerAt(world, hopper.getLevelX(), hopper.getLevelY() + 1.0D, hopper.getLevelZ());
+        Container inventory = HopperBlockEntity.getContainerAt(world, hopper.getLevelX(), hopper.getLevelY() + 1.0D, hopper.getLevelZ(), hopper); // KioCG
 
         BlockPos blockPosition = BlockPos.containing(hopper.getLevelX(), hopper.getLevelY(), hopper.getLevelZ());
         CraftBlock hopper1 = CraftBlock.at(world, blockPosition);
@@ -745,9 +745,23 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         // Paper start - add optimizeEntities parameter
         return HopperBlockEntity.getContainerAt(world, x, y, z, false);
     }
+    // KioCG start
+    @Nullable
+    public static Container getContainerAt(Level world, double x, double y, double z, Hopper hopper) {
+        return getContainerAt(world, x, y, z, false, hopper instanceof HopperBlockEntity);
+    }
+    // KioCG end
+
     @Nullable
     private static Container getContainerAt(Level world, double x, double y, double z, final boolean optimizeEntities) {
         // Paper end - add optimizeEntities parameter
+        // KioCG start
+        return getContainerAt(world, x, y, z, optimizeEntities, false);
+    }
+
+    @Nullable
+    private static Container getContainerAt(Level world, double x, double y, double z, final boolean optimizeEntities, final boolean optimizeHopper) {
+        // KioCG end
         Object object = null;
         BlockPos blockposition = BlockPos.containing(x, y, z);
         if ( !world.spigotConfig.hopperCanLoadChunks && !world.hasChunkAt( blockposition ) ) return null; // Spigot
@@ -767,12 +781,23 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             }
         }
 
-        if (object == null && (!optimizeEntities || !world.paperConfig().hopper.ignoreOccludingBlocks || !org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(block).isOccluding())) { // Paper
+        // KioCG start
+        else {
+            // if (object == null && (!optimizeEntities || !world.paperConfig().hopper.ignoreOccludingBlocks || !org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(block).isOccluding())) { // Paper
+        boolean ignoreOccludingBlocks = world.paperConfig().hopper.ignoreOccludingBlocks && iblockdata.isCollisionShapeFullBlock(world, blockposition);
+        if (!optimizeEntities || !ignoreOccludingBlocks) {
+        // KioCG end
             List<Entity> list = world.getEntities((Entity) null, new AABB(x - 0.5D, y - 0.5D, z - 0.5D, x + 0.5D, y + 0.5D, z + 0.5D), EntitySelector.CONTAINER_ENTITY_SELECTOR);
 
             if (!list.isEmpty()) {
                 object = (Container) list.get(world.random.nextInt(list.size()));
             }
+        // KioCG start
+        }
+        if (object == null && optimizeHopper && (ignoreOccludingBlocks || block instanceof net.minecraft.world.level.block.BaseRailBlock)) {
+            return new net.minecraft.world.level.block.ComposterBlock.EmptyContainer(world, blockposition);
+        }
+        // KioCG end
         }
 
         return (Container) object;
