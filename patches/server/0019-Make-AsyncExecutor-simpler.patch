From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <wangxyper@163.com>
Date: Sat, 12 Aug 2023 11:05:57 +0800
Subject: [PATCH] Make AsyncExecutor simpler


diff --git a/src/main/java/top/leavesmc/leaves/util/AsyncExecutor.java b/src/main/java/top/leavesmc/leaves/util/AsyncExecutor.java
index 0c03f3f051eff7abaacfaa8adb992811f934b9c8..bf811e51b3c1facb119f25ae3c546419cba31bc4 100644
--- a/src/main/java/top/leavesmc/leaves/util/AsyncExecutor.java
+++ b/src/main/java/top/leavesmc/leaves/util/AsyncExecutor.java
@@ -6,15 +6,20 @@ import top.leavesmc.leaves.LeavesLogger;
 import java.util.Queue;
 import java.util.concurrent.locks.Condition;
 import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.LockSupport;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.logging.Level;
 
 // Powered by Pufferfish(https://github.com/pufferfish-gg/Pufferfish)
 public class AsyncExecutor implements Runnable {
 
+    //Molia start - Make it simpler
+    /*
     private final Queue<Runnable> jobs = Queues.newArrayDeque();
     private final Lock mutex = new ReentrantLock();
     private final Condition cond = mutex.newCondition();
+    */
+    private final Queue<Runnable> jobs = Queues.newConcurrentLinkedQueue();
     private final Thread thread;
     private volatile boolean killswitch = false;
 
@@ -27,37 +32,45 @@ public class AsyncExecutor implements Runnable {
     }
 
     public void kill() {
+        //Molia start - Make it simpler
         killswitch = true;
-        cond.signalAll();
+        //cond.signalAll();
+        LockSupport.unpark(this.thread);
+        //Molia end
     }
 
     public void submit(Runnable runnable) {
-        mutex.lock();
+        //Molia start - Make it simpler
+        //mutex.lock();
         try {
             jobs.offer(runnable);
-            cond.signalAll();
+            LockSupport.unpark(this.thread);
+            //cond.signalAll();
         } finally {
-            mutex.unlock();
+            //mutex.unlock();
         }
+        //Molia end
     }
 
     @Override
     public void run() {
+        //Molia start - Make it simpler
         while (!killswitch) {
-            try {
-                Runnable runnable = takeRunnable();
-                if (runnable != null) {
+            Runnable runnable;
+            while ((runnable = this.jobs.poll()) != null) {
+                try {
                     runnable.run();
+                }catch (Exception e){
+                    LeavesLogger.LOGGER.log(Level.SEVERE, e, () -> "Failed to execute async job for thread " + thread.getName());
                 }
-            } catch (InterruptedException e) {
-                Thread.currentThread().interrupt();
-            } catch (Exception e) {
-                LeavesLogger.LOGGER.log(Level.SEVERE, e, () -> "Failed to execute async job for thread " + thread.getName());
             }
+            LockSupport.park();
         }
+        //Molia end
     }
 
-    private Runnable takeRunnable() throws InterruptedException {
+    //Molia start - Make it simpler
+    /*private Runnable takeRunnable() throws InterruptedException {
         mutex.lock();
         try {
             while (jobs.isEmpty() && !killswitch) {
@@ -72,5 +85,6 @@ public class AsyncExecutor implements Runnable {
         } finally {
             mutex.unlock();
         }
-    }
+    }*/
+    //Molia end
 }
